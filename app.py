# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13xYJIFMkSsQE3e8PacszzfiW8jKmQ1aR
"""

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression, Ridge
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split

st.set_page_config(page_title="House Price Analysis", layout="wide")

@st.cache_data
def load_data():
    url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/data/kc_house_data_NaN.csv"
    df = pd.read_csv(url)
    df.drop(['id', 'Unnamed: 0'], axis=1, inplace=True)
    df['bedrooms'].fillna(df['bedrooms'].mean(), inplace=True)
    df['bathrooms'].fillna(df['bathrooms'].mean(), inplace=True)
    return df

df = load_data()
st.title("üè° House Sales in King County, USA")

st.markdown("## Data Preview")
st.dataframe(df.head())

# Sidebar Feature Selection
st.sidebar.header("üìä Model Features Selection")
features = ["floors", "waterfront", "lat", "bedrooms", "sqft_basement", "view",
            "bathrooms", "sqft_living15", "sqft_above", "grade", "sqft_living"]
selected_features = st.sidebar.multiselect("Select features to predict price:", features, default=features)

# Regression Type
regression_type = st.sidebar.radio("Choose regression model:", ['Linear Regression', 'Polynomial + Ridge Regression'])

# Train-test split
test_size = st.sidebar.slider("Test Size (%)", 10, 40, 20)
X = df[selected_features]
y = df['price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size/100, random_state=1)

# Train model
if regression_type == 'Linear Regression':
    model = LinearRegression()
    model.fit(X_train, y_train)
    score = model.score(X_test, y_test)
    st.markdown(f"### Linear Regression R¬≤ score: `{score:.4f}`")

else:
    pipeline = Pipeline([
        ('scaler', StandardScaler()),
        ('poly', PolynomialFeatures(degree=2)),
        ('ridge', Ridge(alpha=0.1))
    ])
    pipeline.fit(X_train, y_train)
    score = pipeline.score(X_test, y_test)
    st.markdown(f"### Polynomial + Ridge Regression R¬≤ score: `{score:.4f}`")

# Visualizations
st.markdown("## üìà Visualizations")
viz_option = st.selectbox("Choose Visualization", ['Correlation Heatmap', 'Waterfront Price Boxplot', 'sqft_above vs Price'])

if viz_option == 'Correlation Heatmap':
    st.markdown("### Correlation Heatmap")
    fig, ax = plt.subplots(figsize=(12, 8))
    sns.heatmap(df.corr(), annot=True, fmt=".2f", cmap="coolwarm", ax=ax)
    st.pyplot(fig)

elif viz_option == 'Waterfront Price Boxplot':
    st.markdown("### Price vs Waterfront")
    fig, ax = plt.subplots()
    sns.boxplot(x='waterfront', y='price', data=df, ax=ax)
    st.pyplot(fig)

elif viz_option == 'sqft_above vs Price':
    st.markdown("### Regression Plot: sqft_above vs Price")
    fig, ax = plt.subplots()
    sns.regplot(x='sqft_above', y='price', data=df, line_kws={'color': 'red'}, ax=ax)
    st.pyplot(fig)